#include <SPI.h>
#include <MFRC522.h>
#include <TimeLib.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define SS_PIN 10
#define RST_PIN 9
#define BUZZER_PIN 7
#define LED_PIN 6 // Define the LED pin

MFRC522 mfrc522(SS_PIN, RST_PIN);

int readsuccess;
byte readcard[4];
char str[32] = "";
String StrUID;
String name = "";

LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();

  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT); // Set the LED pin as output

  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Scan your card...");

  Serial.println("CLEARDATA");
  Serial.println("LABEL,Date,Time,RFID UID,Name,Late");
  delay(1000);

  setTime(8, 59, 0, 1, 1, 2024);
}

void loop() {
  readsuccess = getid();

  if (readsuccess) {
    tone(BUZZER_PIN, 4000, 2000);

    if (StrUID.equals("C4F9B171")) {
      name = "Ruwayd";
    } else if (StrUID.equals("19D2FA7A")) {
      name = "Shaya";
    } else {
      name = "Unknown";
    }

    int currentHour = hour();
    int currentMinute = minute();

    String late = (currentHour > 8 || (currentHour == 8 && currentMinute >= 0)) ? "Yes" : "No";

    Serial.println((String) "DATA,DATE,TIME," + StrUID + "," + name + "," + late);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Welcome, " + name + "!");

    digitalWrite(LED_PIN, HIGH); // Turn on the LED
    delay(2000); // Wait for 2 seconds
    digitalWrite(LED_PIN, LOW);  // Turn off the LED

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Scan your card...");
  }
}

int getid() {
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return 0;
  }
  if (!mfrc522.PICC_ReadCardSerial()) {
    return 0;
  }

  Serial.println("THE UID OF THE SCANNED CARD IS:");

  for (int i = 0; i < 4; i++) {
    readcard[i] = mfrc522.uid.uidByte[i];
    array_to_string(readcard, 4, str);
    StrUID = str;
  }
  mfrc522.PICC_HaltA();
  return 1;
}

void array_to_string(byte array[], unsigned int len, char buffer[]) {
  for (unsigned int i = 0; i < len; i++) {
    byte nib1 = (array[i] >> 4) & 0x0F;
    byte nib2 = (array[i] >> 0) & 0x0F;
    buffer[i * 2 + 0] = nib1 < 0xA ? '0' + nib1 : 'A' + nib1 - 0xA;
    buffer[i * 2 + 1] = nib2 < 0xA ? '0' + nib2 : 'A' + nib2 - 0xA;
  }
  buffer[len * 2] = '\0';
}
